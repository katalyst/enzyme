require 'yaml'
require 'hash'
require 'string'
require 'enzyme'

module Config extend self

  def run()
    file = ['--global', '--organisation', '--project'].keep_if { |x| ARGV.delete(x) }.last.to_s[/[a-z]+$/] || nil
    ARGV.each { |x| raise "Unknown option '#{x}'." if x.start_with?("-") }
    key = ARGV.shift
    value = ARGV.shift
    ARGV.each { |x| raise "Unknown argument '#{x}'." }

    unless value === nil
      set(key, value, file)
      puts "Set '#{key}' to '#{value}' in '#{$system_settings.config[file].path}'."
    else
      val = get(key, file)
      if val.is_a?(Array) || val.is_a?(Hash)
        puts val.to_hash.to_yaml
      else
        puts val.to_s
      end
    end
    puts
  end

  # Check that the given setting has been set, if it hasn't prompt the user to give it a value.
  # - key: The setting the check & set.
  # - file: Which config file to set the setting in. See the #set method.
  def prompt_for(key, file=nil)
    unless is_set?(key)
      print "Set '#{key}': "
      set(key, gets.strip, file)
      puts
    end
  end

  # Checks if the given setting has a value.
  # - key: The setting to check.
  def is_set?(key)
    (get(key).nil? || get(key).empty?) ? false : true
  end

  # Gets the value of a given setting.
  # - key: The setting to get.
  # - file: If set, specifies which config file to get the setting from.
  def get(key, file=nil)
    s = file ? (YAML.load_file($system_settings.config[file].path) || {}) : $settings
    key.to_s.split('.').each do |o|
      return nil if s[o].nil?
      s = s[o]
    end
    s
  end

  # Sets the value of the given setting.
  # - key: The setting to set.
  # - value: The value to set the setting to.
  # - file: Which config file to set the setting in.
  # - temp: If true, don't save the setting to the config file, just update the settings held in memory.
  def set(key, value, file=nil, temp=false)
    file ||= 'global'
    # FIXME: This could be simplified... heaps.
    new_settings = { 'enzyme_version' => $system_settings.version }
    current_hash = new_settings
    keys = key.to_s.split(".")
    keys.each do |key|
      key = key.to_i if key.is_i?
      current_hash[key] = (key == keys.last) ? value : {}
      current_hash = current_hash[key]
    end

    $settings = $settings.deep_merge(new_settings)

    # If this isn't just temporary.
    unless temp

      # Bail if the config file doesn't exist.
      raise "Config file could not be found at '#{$system_settings.config[file].path}'." unless $system_settings.config[file].exists

      # Reload the settings to avoid incuding temporary settings.
      settings = YAML.load_file($system_settings.config[file].path) || {}
      # Merge in the new settings.
      settings = settings.deep_merge(new_settings)

      # Save the settings to the config file.
      File.open($system_settings.config[file].path, "w") do |f|
        f.write("\# Generated by Enzyme.\n")
        f.write(settings.to_yaml)
      end

    end

  end

end

Enzyme.register('config', Config) do
  puts "#{$format.bold}SYNOPSIS#{$format.normal}"
  puts '     enzyme config [<key> [<value> [--global]]]'
  puts
  puts "#{$format.bold}EXAMPLES#{$format.normal}"
  puts '     enzyme config user dave --global'
  puts
  puts '     enzyme config user'
  puts '     > dave'
  puts
  puts '     enzyme config project_name my_project'
  puts
  puts '     enzyme config project_name'
  puts '     > my_project'
  puts
end