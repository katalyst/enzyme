require 'enzyme'

module Config extend self

  def run()
    file = ['--global', '--organisation', '--project'].keep_if { |x| ARGV.delete(x) }.last.to_s[/[a-z]+$/] || nil
    ARGV.each { |x| raise UnknownOption.new(x) if x.start_with?("-") }
    key = ARGV.shift
    value = ARGV.shift
    ARGV.each { |x| raise UnknownArgument.new(x) }

    unless value === nil
      set(key, value, file)
      puts "Set '#{key}' to '#{value}' in '#{$system_settings.config[file].path}'."
    else
      val = get(key, file)
      if val.is_a?(Array) || val.is_a?(Hash)
        puts val.to_hash.to_yaml
      else
        puts val.to_s
      end
    end
    puts
  end

  # Checks if the given setting has a value.
  # - key: The setting to check.
  def is_set?(key)
    (get(key).nil? || get(key).empty?) ? false : true
  end

  # Gets the value of a given setting.
  # - key: The setting to get.
  # - file: If set, specifies which config file to get the setting from.
  def get(key, file=nil)
    s = file ? (YAML.load_file($system_settings.config[file.to_s].path) || {}) : $settings
    key.to_s.split('.').each do |o|
      return nil if s[o].nil?
      s = s[o]
    end
    s
  end

  # Sets the value of the given setting.
  # - key: The setting to set.
  # - value: The value to set the setting to.
  # - file: Which config file to set the setting in.
  def set(key, value, file=nil)
    if file.nil?
      file = $system_settings.config.project.exists ? "project" : "global"
    else
      file = file.nil? ? 'global' : file.to_s
    end

    # Bail if the config file doesn't exist.
    raise ConfigFileNotFound.new($system_settings.config[file].path) unless $system_settings.config[file].exists

    # FIXME: This could be simplified... heaps.
    new_settings = { 'enzyme_version' => $system_settings.version }
    current_hash = new_settings
    keys = key.to_s.split(".")
    keys.each do |key|
      key = key.to_i if key.is_i?
      current_hash[key] = (key == keys.last) ? value : {}
      current_hash = current_hash[key]
    end

    $settings = $settings.deep_merge(new_settings)

    # Reload the settings to avoid including temporary settings.
    settings = YAML.load_file($system_settings.config[file].path) || {}
    # Merge in the new settings.
    settings = settings.deep_merge(new_settings)

    # Save the settings to the config file.
    write($system_settings.config[file].path, settings)
  end

  def write(path, settings)
    File.open(path, "w") do |f|
      f.write("\# Generated by Enzyme.\n")
      f.write(settings.to_yaml)
    end
  end

end

Enzyme.register('config', Config) do
  puts "#{$format.bold}SYNOPSIS#{$format.normal}"
  puts '     enzyme config [<key> [<value> [--global]]]'
  puts
  puts "#{$format.bold}EXAMPLES#{$format.normal}"
  puts '     enzyme config user dave --global'
  puts
  puts '     enzyme config user'
  puts '     > dave'
  puts
  puts '     enzyme config project_name my_project'
  puts
  puts '     enzyme config project_name'
  puts '     > my_project'
  puts
end
